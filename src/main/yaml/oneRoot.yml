variables:
  seed: &seed
    min: 0
    max: 20
    step: 1
    default: 0
  radius: &leaderRadius
    100.0
  maxResource: &maxResource
    1000.0
  layerX: &layerX
    10
  layerY: &layerY
    -10
  maxSuccess: &maxSuccess
    formula: *maxResource
  gaussianShape: &gaussianShape
    type: ArbitraryVariable
    parameters: [5, [1, 5, 10]]
  range: &range
    formula: cloningRange * 1.01
  cloningRange: &cloningRange
    formula: 5

network-model:
  type: ConnectWithinDistance
  parameters: *range

seeds:
  scenario: *seed
  simulation: *seed

layers:
  - type: BidimensionalGaussianLayer
    parameters: [*layerX, *layerY, *maxSuccess, *gaussianShape]
    molecule: successSource
  - type: BidimensionalGaussianLayer
    parameters: [*layerY, *layerX, *maxResource, *gaussianShape]
    molecule: localResource

incarnation: collektive

_pool: &program
  - time-distribution: 1
    type: Event
    actions:
      - type: RunCollektiveProgram
        parameters: [it.unibo.collektive.vmc.VMCSourceKt.withSpawning]

deployments:
  - type: Point
    parameters: [0, 0]
    programs:
      - *program

    properties:
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LayerProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.RandomNodeProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.ResourceSensorProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LocationSensorProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.SuccessSensorProperty
        parameters: [ *maxSuccess ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LeaderSensorProperty
        parameters: [ *leaderRadius ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.DeviceSpawner
        parameters: [ *cloningRange ]
